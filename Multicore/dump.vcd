$date
	Sat Feb 22 17:33:50 2025
$end
$version
	QuestaSim Version 2024.2
$end
$timescale
	1ns
$end

$scope module tb_top $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 8 # A [7:0] $end
$var reg 8 $ B [7:0] $end
$var reg 1 % start_op $end
$var reg 4 & op_sel [3:0] $end
$var reg 12 ' address_in [11:0] $end
$var reg 8 ( data_in [7:0] $end
$var reg 1 ) end_op $end
$var reg 16 * result [15:0] $end

$scope module top1 $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 - A [7] $end
$var wire 1 . A [6] $end
$var wire 1 / A [5] $end
$var wire 1 0 A [4] $end
$var wire 1 1 A [3] $end
$var wire 1 2 A [2] $end
$var wire 1 3 A [1] $end
$var wire 1 4 A [0] $end
$var wire 1 5 B [7] $end
$var wire 1 6 B [6] $end
$var wire 1 7 B [5] $end
$var wire 1 8 B [4] $end
$var wire 1 9 B [3] $end
$var wire 1 : B [2] $end
$var wire 1 ; B [1] $end
$var wire 1 < B [0] $end
$var wire 1 = start_op $end
$var wire 1 > op_sel [3] $end
$var wire 1 ? op_sel [2] $end
$var wire 1 @ op_sel [1] $end
$var wire 1 A op_sel [0] $end
$var wire 1 B address_in [11] $end
$var wire 1 C address_in [10] $end
$var wire 1 D address_in [9] $end
$var wire 1 E address_in [8] $end
$var wire 1 F address_in [7] $end
$var wire 1 G address_in [6] $end
$var wire 1 H address_in [5] $end
$var wire 1 I address_in [4] $end
$var wire 1 J address_in [3] $end
$var wire 1 K address_in [2] $end
$var wire 1 L address_in [1] $end
$var wire 1 M address_in [0] $end
$var wire 1 N data_in [7] $end
$var wire 1 O data_in [6] $end
$var wire 1 P data_in [5] $end
$var wire 1 Q data_in [4] $end
$var wire 1 R data_in [3] $end
$var wire 1 S data_in [2] $end
$var wire 1 T data_in [1] $end
$var wire 1 U data_in [0] $end
$var reg 1 V end_op $end
$var reg 16 W result [15:0] $end
$var wire 1 X hit $end
$var wire 1 Y gnt $end
$var wire 1 Z valid $end
$var wire 1 [ rw [1] $end
$var wire 1 \ rw [0] $end
$var wire 1 ] address_cache [11] $end
$var wire 1 ^ address_cache [10] $end
$var wire 1 _ address_cache [9] $end
$var wire 1 ` address_cache [8] $end
$var wire 1 a address_cache [7] $end
$var wire 1 b address_cache [6] $end
$var wire 1 c address_cache [5] $end
$var wire 1 d address_cache [4] $end
$var wire 1 e address_cache [3] $end
$var wire 1 f address_cache [2] $end
$var wire 1 g address_cache [1] $end
$var wire 1 h address_cache [0] $end
$var wire 1 i req_arb $end
$var wire 1 j gnt_arb $end
$var wire 1 k data_cache [7] $end
$var wire 1 l data_cache [6] $end
$var wire 1 m data_cache [5] $end
$var wire 1 n data_cache [4] $end
$var wire 1 o data_cache [3] $end
$var wire 1 p data_cache [2] $end
$var wire 1 q data_cache [1] $end
$var wire 1 r data_cache [0] $end

$scope module pro1 $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 - A [7] $end
$var wire 1 . A [6] $end
$var wire 1 / A [5] $end
$var wire 1 0 A [4] $end
$var wire 1 1 A [3] $end
$var wire 1 2 A [2] $end
$var wire 1 3 A [1] $end
$var wire 1 4 A [0] $end
$var wire 1 5 B [7] $end
$var wire 1 6 B [6] $end
$var wire 1 7 B [5] $end
$var wire 1 8 B [4] $end
$var wire 1 9 B [3] $end
$var wire 1 : B [2] $end
$var wire 1 ; B [1] $end
$var wire 1 < B [0] $end
$var wire 1 = start_op $end
$var wire 1 > op_sel [3] $end
$var wire 1 ? op_sel [2] $end
$var wire 1 @ op_sel [1] $end
$var wire 1 A op_sel [0] $end
$var wire 1 B address_in [11] $end
$var wire 1 C address_in [10] $end
$var wire 1 D address_in [9] $end
$var wire 1 E address_in [8] $end
$var wire 1 F address_in [7] $end
$var wire 1 G address_in [6] $end
$var wire 1 H address_in [5] $end
$var wire 1 I address_in [4] $end
$var wire 1 J address_in [3] $end
$var wire 1 K address_in [2] $end
$var wire 1 L address_in [1] $end
$var wire 1 M address_in [0] $end
$var wire 1 N data_in [7] $end
$var wire 1 O data_in [6] $end
$var wire 1 P data_in [5] $end
$var wire 1 Q data_in [4] $end
$var wire 1 R data_in [3] $end
$var wire 1 S data_in [2] $end
$var wire 1 T data_in [1] $end
$var wire 1 U data_in [0] $end
$var wire 1 X hit $end
$var wire 1 Y gnt $end
$var wire 1 k data_cache [7] $end
$var wire 1 l data_cache [6] $end
$var wire 1 m data_cache [5] $end
$var wire 1 n data_cache [4] $end
$var wire 1 o data_cache [3] $end
$var wire 1 p data_cache [2] $end
$var wire 1 q data_cache [1] $end
$var wire 1 r data_cache [0] $end
$var reg 16 s result [15:0] $end
$var reg 1 t rw $end
$var reg 1 u end_op $end
$var reg 1 v valid $end
$var reg 12 w address_cache [11:0] $end
$var reg 1 x start_load $end
$var reg 1 y end_load $end
$var reg 1 z start_store $end
$var reg 1 { end_store $end
$var reg 1 | start_alu $end
$var reg 1 } end_alu $end
$var reg 1 ~ valid_load $end
$var reg 1 !! valid_store $end
$var reg 16 "! result_alu [15:0] $end
$var reg 16 #! result_load [15:0] $end
$var reg 16 $! result_store [15:0] $end
$var reg 12 %! address_cache_load [11:0] $end
$var reg 12 &! address_cache_store [11:0] $end

$scope module alu1 $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 - A [7] $end
$var wire 1 . A [6] $end
$var wire 1 / A [5] $end
$var wire 1 0 A [4] $end
$var wire 1 1 A [3] $end
$var wire 1 2 A [2] $end
$var wire 1 3 A [1] $end
$var wire 1 4 A [0] $end
$var wire 1 5 B [7] $end
$var wire 1 6 B [6] $end
$var wire 1 7 B [5] $end
$var wire 1 8 B [4] $end
$var wire 1 9 B [3] $end
$var wire 1 : B [2] $end
$var wire 1 ; B [1] $end
$var wire 1 < B [0] $end
$var wire 1 '! start_alu $end
$var wire 1 > op_sel [3] $end
$var wire 1 ? op_sel [2] $end
$var wire 1 @ op_sel [1] $end
$var wire 1 A op_sel [0] $end
$var reg 16 (! result_alu [15:0] $end
$var reg 1 )! end_alu $end
$var reg 16 *! mul_temp1 [15:0] $end
$var reg 16 +! mul_temp2 [15:0] $end
$var reg 16 ,! sf1_temp1 [15:0] $end
$var reg 16 -! sf1_temp2 [15:0] $end
$var reg 16 .! sf2_temp1 [15:0] $end
$var reg 16 /! sf2_temp2 [15:0] $end
$var reg 16 0! sf3_temp1 [15:0] $end
$var reg 16 1! sf3_temp2 [15:0] $end
$var reg 16 2! sf4_temp1 [15:0] $end
$var reg 16 3! sf4_temp2 [15:0] $end
$var integer 32 4! counter $end
$upscope $end

$scope module load2 $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 B address_in [11] $end
$var wire 1 C address_in [10] $end
$var wire 1 D address_in [9] $end
$var wire 1 E address_in [8] $end
$var wire 1 F address_in [7] $end
$var wire 1 G address_in [6] $end
$var wire 1 H address_in [5] $end
$var wire 1 I address_in [4] $end
$var wire 1 J address_in [3] $end
$var wire 1 K address_in [2] $end
$var wire 1 L address_in [1] $end
$var wire 1 M address_in [0] $end
$var wire 1 k data_cache [7] $end
$var wire 1 l data_cache [6] $end
$var wire 1 m data_cache [5] $end
$var wire 1 n data_cache [4] $end
$var wire 1 o data_cache [3] $end
$var wire 1 p data_cache [2] $end
$var wire 1 q data_cache [1] $end
$var wire 1 r data_cache [0] $end
$var wire 1 5! start_load $end
$var wire 1 Y gnt $end
$var wire 1 X hit $end
$var reg 1 6! end_load $end
$var reg 1 7! valid_load $end
$var reg 12 8! address_cache_load [11:0] $end
$var reg 16 9! result_load [15:0] $end
$var reg 1 :! complete $end
$var reg 1 ;! send_addr $end
$var reg 2 <! state [1:0] $end
$var reg 2 =! next_state [1:0] $end
$upscope $end

$scope module store3 $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 B address_in [11] $end
$var wire 1 C address_in [10] $end
$var wire 1 D address_in [9] $end
$var wire 1 E address_in [8] $end
$var wire 1 F address_in [7] $end
$var wire 1 G address_in [6] $end
$var wire 1 H address_in [5] $end
$var wire 1 I address_in [4] $end
$var wire 1 J address_in [3] $end
$var wire 1 K address_in [2] $end
$var wire 1 L address_in [1] $end
$var wire 1 M address_in [0] $end
$var wire 1 >! start_store $end
$var wire 1 N data_in [7] $end
$var wire 1 O data_in [6] $end
$var wire 1 P data_in [5] $end
$var wire 1 Q data_in [4] $end
$var wire 1 R data_in [3] $end
$var wire 1 S data_in [2] $end
$var wire 1 T data_in [1] $end
$var wire 1 U data_in [0] $end
$var wire 1 X hit $end
$var reg 12 ?! address_cache_store [11:0] $end
$var wire 1 k data_cache [7] $end
$var wire 1 l data_cache [6] $end
$var wire 1 m data_cache [5] $end
$var wire 1 n data_cache [4] $end
$var wire 1 o data_cache [3] $end
$var wire 1 p data_cache [2] $end
$var wire 1 q data_cache [1] $end
$var wire 1 r data_cache [0] $end
$var reg 16 @! result_store [15:0] $end
$var reg 1 A! gnt $end
$var reg 1 B! valid_store $end
$var reg 1 C! end_store $end
$var reg 1 D! complete $end
$var reg 1 E! send_addr $end
$var reg 1 F! send_data $end
$var reg 2 G! state [1:0] $end
$var reg 2 H! next_state [1:0] $end
$upscope $end
$upscope $end

$scope module cache2 $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 \ rw $end
$var wire 1 Z valid $end
$var wire 1 ] address_cache [11] $end
$var wire 1 ^ address_cache [10] $end
$var wire 1 _ address_cache [9] $end
$var wire 1 ` address_cache [8] $end
$var wire 1 a address_cache [7] $end
$var wire 1 b address_cache [6] $end
$var wire 1 c address_cache [5] $end
$var wire 1 d address_cache [4] $end
$var wire 1 e address_cache [3] $end
$var wire 1 f address_cache [2] $end
$var wire 1 g address_cache [1] $end
$var wire 1 h address_cache [0] $end
$var wire 1 j gnt_arb $end
$var wire 1 k data_cache [7] $end
$var wire 1 l data_cache [6] $end
$var wire 1 m data_cache [5] $end
$var wire 1 n data_cache [4] $end
$var wire 1 o data_cache [3] $end
$var wire 1 p data_cache [2] $end
$var wire 1 q data_cache [1] $end
$var wire 1 r data_cache [0] $end
$var reg 1 I! hit $end
$var reg 1 J! cpu_gnt $end
$var reg 1 K! req_arb $end
$var reg 12 L! temp_addr [11:0] $end
$var reg 1 M! addr_storing $end
$var reg 1 N! send_data $end
$var reg 1 O! receive_data $end
$var reg 1 P! hit_ack $end
$var reg 1 Q! cpu_gnt_ack $end
$var reg 1 R! req_arb_ack $end
$var reg 3 S! state [2:0] $end
$var reg 3 T! next_state [2:0] $end
$upscope $end

$scope module arb3 $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 i req_arb $end
$var reg 1 U! gnt_arb $end
$upscope $end
$upscope $end
$upscope $end

$scope begin pkg $end
$upscope $end

$scope begin tb_sv_unit $end
$upscope $end

$scope begin std $end
$upscope $end

$scope begin top_sv_unit $end
$upscope $end

$scope begin processor_sv_unit $end
$upscope $end

$scope begin alu_sv_unit $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1!
1"
bx #
bx $
x%
bx &
bx '
bx (
0)
b0 *
0V
b0 W
b0 s
xt
0u
0v
b0 w
xx
0y
xz
0{
x|
0}
0~
0!!
b0 "!
b0 #!
b0 $!
b0 %!
b0 &!
b0 (!
0)!
b0 *!
b0 +!
b0 ,!
b0 -!
b0 .!
b0 /!
b0 0!
b0 1!
b0 2!
b0 3!
06!
07!
b0 8!
b0 9!
0:!
0;!
b0 <!
b0 =!
b0 ?!
b0 @!
xA!
0B!
0C!
0D!
0E!
xF!
b0 G!
b0 H!
0I!
0J!
0K!
bz L!
0M!
xN!
xO!
0P!
0Q!
0R!
b0 S!
b0 T!
0U!
b0 4!
0X
xY
0Z
x\
z[
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0i
0j
xr
xq
xp
xo
xn
xm
xl
xk
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
1,
1+
x>!
x5!
x'!
$end
#5
0!
0+
#10
1!
1+
#15
0!
0+
#20
0"
b11111111 #
b11111110 $
1%
b10001 '
b101 &
1!
0,
1=
1A
0@
1?
0>
1M
0L
0K
0J
1I
0H
0G
0F
0E
0D
0C
0B
0<
1;
1:
19
18
17
16
15
14
13
12
11
10
1/
1.
1-
1x
0z
0|
0'!
1+
15!
0>!
b1 =!
1t
1\
b1 <!
1;!
17!
b10 =!
1~
b10001 8!
b10001 %!
1v
b10001 w
1h
1d
1Z
b1 T!
#25
0!
0+
#30
1!
1+
b1 S!
b10 <!
07!
1M!
b10 T!
b10001 L!
0~
0v
0Z
b1 T!
b10 T!
#35
0!
0+
#40
1!
1+
b10 S!
b100 T!
#45
0!
0+
#50
1!
1+
b100 S!
1R!
b101 T!
1K!
1i
#55
0!
0+
#60
1!
1+
1U!
b101 S!
1j
1N!
b111 T!
#65
0!
0+
#70
1!
1+
b111 S!
1Q!
b0 T!
1J!
#75
0!
0+
#80
1!
1+
b0 S!
0Q!
0R!
0M!
bz L!
0K!
0J!
0i
#85
0!
0+
#90
1!
1+
0U!
0j
#95
0!
0+
#100
1!
1+
#105
0!
0+
#110
1!
1+
#115
0!
0+
#120
1!
1+
#125
0!
0+
#130
1!
1+
#135
0!
0+
#140
1!
1+
#145
0!
0+
#150
1!
1+
#155
0!
0+
#160
1!
1+
#165
0!
0+
#170
1!
1+
#175
0!
0+
#180
1!
1+
#185
0!
0+
#190
1!
1+
#195
0!
0+
#200
1!
1+
#205
0!
0+
#210
1!
1+
#215
0!
0+
#220
1!
1+
#225
0!
0+
#230
1!
1+
#235
0!
0+
#240
1!
1+
#245
0!
0+
#250
1!
1+
#255
0!
0+
#260
1!
1+
#265
0!
0+
#270
1!
1+
#275
0!
0+
#280
1!
1+
#285
0!
0+
#290
1!
1+
#295
0!
0+
#300
1!
1+
#305
0!
0+
#310
1!
1+
#315
0!
0+
#320
1!
1+
#325
0!
0+
#330
1!
1+
#335
0!
0+
#340
1!
1+
#345
0!
0+
#350
1!
1+
#355
0!
0+
#360
1!
1+
#365
0!
0+
#370
1!
1+
#375
0!
0+
#380
1!
1+
#385
0!
0+
#390
1!
1+
#395
0!
0+
#400
1!
1+
#405
0!
0+
#410
1!
1+
#415
0!
0+
#420
1!
1+
#425
0!
0+
#430
1!
1+
#435
0!
0+
#440
1!
1+
#445
0!
0+
#450
1!
1+
#455
0!
0+
#460
1!
1+
#465
0!
0+
#470
1!
1+
#475
0!
0+
#480
1!
1+
#485
0!
0+
#490
1!
1+
#495
0!
0+
#500
1!
1+
#505
0!
0+
#510
1!
1+
#515
0!
0+
